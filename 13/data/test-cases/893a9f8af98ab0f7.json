{"uid":"893a9f8af98ab0f7","name":"test_signup_with_too_short_lastname","fullName":"tests.api.test_api_signup#test_signup_with_too_short_lastname","historyId":"5aa54fb67fc382093cfa595b230c5915","time":{"start":1718209478621,"stop":1718209478632,"duration":11},"status":"failed","statusMessage":"AssertionError: Expected error message for wrong last name\nassert 'Minimum last... 4 characters' == 'Minimum firs... 4 characters'\n  \n  - Minimum firstName length: 4 characters\n  ?         ^^^\n  + Minimum lastName length: 4 characters\n  ?         ^^","statusTrace":"def test_signup_with_too_short_lastname():\n        # Generate a username and password\n        username = generate_username()\n        password = generate_password()\n        email = \"test@example.com\"\n        roles = [\"ROLE_ADMIN\"]\n        firstName = \"John\"\n        lastName = \"D\"  # intentionally short last name\n    \n        # Create the request body\n        user = User(\n            username=username,\n            email=email,\n            password=password,\n            roles=roles,\n            firstName=firstName,\n            lastName=lastName\n        )\n    \n        try:\n            # Send the signup request\n>           SignUp().api_call(user)\n\ntests/api/test_api_signup.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/post_sign_up.py:7: in api_call\n    response = self.make_request(\"POST\", \"users/signup\", json=user_data)\napi/base_api.py:33: in make_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error:  for url: http://localhost:4001/users/signup\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_signup_with_too_short_lastname():\n        # Generate a username and password\n        username = generate_username()\n        password = generate_password()\n        email = \"test@example.com\"\n        roles = [\"ROLE_ADMIN\"]\n        firstName = \"John\"\n        lastName = \"D\"  # intentionally short last name\n    \n        # Create the request body\n        user = User(\n            username=username,\n            email=email,\n            password=password,\n            roles=roles,\n            firstName=firstName,\n            lastName=lastName\n        )\n    \n        try:\n            # Send the signup request\n            SignUp().api_call(user)\n    \n        except requests.exceptions.HTTPError as e:\n            assert e.response.status_code == 400, \"Expected status code 400\"\n>           assert \"Minimum lastName length: 4 characters\" == e.response.json()[\n                \"lastName\"], \"Expected error message for wrong last name\"\nE           AssertionError: Expected error message for wrong last name\nE           assert 'Minimum last... 4 characters' == 'Minimum firs... 4 characters'\nE             \nE             - Minimum firstName length: 4 characters\nE             ?         ^^^\nE             + Minimum lastName length: 4 characters\nE             ?         ^^\n\ntests/api/test_api_signup.py:62: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1718209477165,"stop":1718209477182,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected error message for wrong last name\nassert 'Minimum last... 4 characters' == 'Minimum firs... 4 characters'\n  \n  - Minimum firstName length: 4 characters\n  ?         ^^^\n  + Minimum lastName length: 4 characters\n  ?         ^^","statusTrace":"def test_signup_with_too_short_lastname():\n        # Generate a username and password\n        username = generate_username()\n        password = generate_password()\n        email = \"test@example.com\"\n        roles = [\"ROLE_ADMIN\"]\n        firstName = \"John\"\n        lastName = \"D\"  # intentionally short last name\n    \n        # Create the request body\n        user = User(\n            username=username,\n            email=email,\n            password=password,\n            roles=roles,\n            firstName=firstName,\n            lastName=lastName\n        )\n    \n        try:\n            # Send the signup request\n>           SignUp().api_call(user)\n\ntests/api/test_api_signup.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/post_sign_up.py:7: in api_call\n    response = self.make_request(\"POST\", \"users/signup\", json=user_data)\napi/base_api.py:33: in make_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 400 Client Error:  for url: http://localhost:4001/users/signup\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/requests/models.py:1021: HTTPError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_signup_with_too_short_lastname():\n        # Generate a username and password\n        username = generate_username()\n        password = generate_password()\n        email = \"test@example.com\"\n        roles = [\"ROLE_ADMIN\"]\n        firstName = \"John\"\n        lastName = \"D\"  # intentionally short last name\n    \n        # Create the request body\n        user = User(\n            username=username,\n            email=email,\n            password=password,\n            roles=roles,\n            firstName=firstName,\n            lastName=lastName\n        )\n    \n        try:\n            # Send the signup request\n            SignUp().api_call(user)\n    \n        except requests.exceptions.HTTPError as e:\n            assert e.response.status_code == 400, \"Expected status code 400\"\n>           assert \"Minimum lastName length: 4 characters\" == e.response.json()[\n                \"lastName\"], \"Expected error message for wrong last name\"\nE           AssertionError: Expected error message for wrong last name\nE           assert 'Minimum last... 4 characters' == 'Minimum firs... 4 characters'\nE             \nE             - Minimum firstName length: 4 characters\nE             ?         ^^^\nE             + Minimum lastName length: 4 characters\nE             ?         ^^\n\ntests/api/test_api_signup.py:62: AssertionError","steps":[],"attachments":[{"uid":"c47936caf80f8961","name":"log","source":"c47936caf80f8961.txt","type":"text/plain","size":340}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.api"},{"name":"suite","value":"test_api_signup"},{"name":"host","value":"fv-az1210-979"},{"name":"thread","value":"3401-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api.test_api_signup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"893a9f8af98ab0f7.json","parameterValues":[]}